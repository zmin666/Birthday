package com.zmin.birthday.app.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zmin.birthday.mvp.model.entity.Birthday;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BIRTHDAY".
*/
public class BirthdayDao extends AbstractDao<Birthday, String> {

    public static final String TABLENAME = "BIRTHDAY";

    /**
     * Properties of entity Birthday.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Old_birth = new Property(2, String.class, "old_birth", false, "OLD_YEAR");
        public final static Property Birth = new Property(3, String.class, "birth", false, "YEAR");
        public final static Property Perfer = new Property(4, String.class, "perfer", false, "PERFER");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property IgnoreYear = new Property(6, String.class, "ignoreYear", false, "IGNOREYEAR");
    }


    public BirthdayDao(DaoConfig config) {
        super(config);
    }
    
    public BirthdayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIRTHDAY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"OLD_YEAR\" TEXT," + // 2: old_birth
                "\"YEAR\" TEXT," + // 3: birth
                "\"PERFER\" TEXT," + // 4: perfer
                "\"SEX\" TEXT," + // 5: sex
                "\"IGNOREYEAR\" TEXT);"); // 6: ignoreYear
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIRTHDAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Birthday entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String old_birth = entity.getOld_birth();
        if (old_birth != null) {
            stmt.bindString(3, old_birth);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(4, birth);
        }
 
        String perfer = entity.getPerfer();
        if (perfer != null) {
            stmt.bindString(5, perfer);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String ignoreYear = entity.getIgnoreYear();
        if (ignoreYear != null) {
            stmt.bindString(7, ignoreYear);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Birthday entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String old_birth = entity.getOld_birth();
        if (old_birth != null) {
            stmt.bindString(3, old_birth);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(4, birth);
        }
 
        String perfer = entity.getPerfer();
        if (perfer != null) {
            stmt.bindString(5, perfer);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String ignoreYear = entity.getIgnoreYear();
        if (ignoreYear != null) {
            stmt.bindString(7, ignoreYear);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Birthday readEntity(Cursor cursor, int offset) {
        Birthday entity = new Birthday( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // old_birth
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birth
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // perfer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // ignoreYear
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Birthday entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOld_birth(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPerfer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIgnoreYear(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Birthday entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Birthday entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Birthday entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
